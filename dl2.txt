import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import time
from keras.models import Sequential
from keras.layers import Dense,Activation,Dropout
from keras.datasets import imdb

(X_train,Y_train),(X_test,Y_test)=imdb.load_data()
X=np.concatenate((X_train,X_test),axis=0)
Y=np.concatenate((Y_train,Y_test),axis=0)

print("training Data:")
print(X.shape)
print(Y.shape)
print("Classes:")
print(np.unique(Y))
print("Number of words:")
print(len(np.unique(np.hstack(X))))
result=[len(x) for x in X]
print("Mean %.2f Std %f" %(np.mean(result),np.std(result)))
plt.boxplot(result)

def vectorize_sequence(sequences,dimension=5000):
  results=np.zeros((len(sequences),dimension))
  for i,sequence in enumerate(sequences):
    results[i,sequence]=1
  return results

(train_data,train_labels),(test_data,test_labels)=imdb.load_data(num_words=5000)
x_train=vectorize_sequence(train_data)
x_test=vectorize_sequence(test_data)
y_train=np.asarray(train_labels).astype('float32')
y_test=np.asarray(test_labels).astype('float32')

model = Sequential()
# Input - Layer
model.add(Dense(50, activation = "relu", input_shape=(5000, )))
# Hidden - Layers
model.add(Dropout(0.3, noise_shape=None, seed=None))
model.add(Dense(50, activation = "relu"))
model.add(Dropout(0.2, noise_shape=None, seed=None))
model.add(Dense(50, activation = "relu"))
# Output- Layer
model.add(Dense(1, activation = "sigmoid"))
model.summary()

model.compile(
optimizer = "adam",
loss = "binary_crossentropy",
metrics = ["acc"]
)

x_val=x_train[:10000]
partial_x_train=x_train[10000:]
y_val=y_train[:10000]
partial_y_train=y_train[10000:]

start_time_m1=time.time()
history=model.fit(partial_x_train,partial_y_train,epochs=20,batch_size=500,validation_data=(x_val,y_val))
total_time_m1=time.time()-start_time_m1
print("The CNN 1 layer took %.4f time to train"%(total_time_m1))

history_dict=history.history
history_dict.keys()

acc=history.history['acc']
val_acc=history.history['val_acc']
loss=history.history['loss']
val_loss=history.history['val_loss']
epochs=range(1,len(acc)+1)
plt.plot(epochs,loss,'bo',label="training_loss")
plt.plot(epochs,val_loss,'b',label="validation_loss")
plt.title("training and validation loss")
plt.xlabel("Epochs")
plt.ylabel("loss")
plt.legend()
plt.show()

print(np.mean(history.history["val_acc"]))










