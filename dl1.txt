!pip install scikit-learn==1.1.3

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
import keras
from keras.layers import Dense, Activation
from keras.models import Sequential
import warnings
warnings.filterwarnings("ignore") 

boston=load_boston()
data=pd.DataFrame(boston.data)
data.columns=boston.feature_names
data['PRICE']=boston.target
data.head()


print(data.shape)
print(data.dtypes)
print(data.isnull().sum())
print(data.describe())

sns.displot(data.PRICE)
correlation=data.corr()
correlation.loc['PRICE']
fig,axes=plt.subplots(figsize=(15,12))
sns.heatmap(correlation,annot=True)

X=data.iloc[:,:-1]
Y=data.PRICE
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=4)
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.fit_transform(X_test)

model=Sequential()
model.add(Dense(128,activation='relu',input_dim=13))
model.add(Dense(64,activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(16,activation='relu'))
model.add(Dense(1))
model.compile(optimizer='adam',loss='mean_squared_error')
model.summary()

model.fit(X_train,Y_train,epochs=100)

Y_pred=model.predict(X_test)
r2=r2_score(Y_test,Y_pred)
rmse=np.sqrt(mean_squared_error(Y_test,Y_pred))
print("R2 score is = ",r2)
print("RMSE is = ",rmse)













